# Include the manual of this task
%manual
%include <man/master_plots.man>
%end

%include <qsub_4_bash.h>

%include <head_4_bash.h>                                # Include header common to all tasks. 
                                                        # It manages general calls to ecflow client
%include <etc/general.ini>

#====================================================================================================

cd ${tmp_root_dir} || echo "It's not possible to move to \"${tmp_root_dir}\" working directory." && echo "Now I'm in the \"$tmp_root_dir\" working directory."

# Current date (UCT) from ecflow variable
DATE="%ECF_DATE%" 

# Bulletin date
DATEB=$( date -u -d "$DATE $bulletin_date_delta" +%%Y%%m%%d )

YYYYB="${DATEB:0:4}"
MMB="${DATEB:4:2}"
DDB="${DATEB:6:2}"

# ********** Directories **********

input_dir="${input_dir_tpl//%%year%%/${YYYYB}}"
input_dir="${input_dir//%%month%%/${MMB}}"
input_dir="${input_dir//%%day%%/${DDB}}"

data_dir="${data_dir_tpl//%%year%%/${YYYYB}}"
data_dir="${data_dir//%%month%%/${MMB}}"
data_dir="${data_dir//%%day%%/${DDB}}"

output_dir="${output_dir_tpl//%%year%%/${YYYYB}}"
output_dir="${output_dir//%%month%%/${MMB}}"
output_dir="${output_dir//%%day%%/${DDB}}"

#====================================================================================================

if [[ ! -f "${tmp_root_dir}/${depths_tmp}" ]]; then

    echo "\"${depths_tmp}\" depths file will be created right now."
    
    declare -a shy_lev
    
    # the first one is imposed to 0 also if itn't present in the shyfem initialization file
    shy_lev[0]=0
    
    write_array=0
    
    while IFS=" " read  read_levels
    do
    
        if [[ "${read_levels}" == '$levels'                     ]]; then write_array=1 ; continue ; fi
        if [[ "${read_levels}" == '$end' && $write_array -eq 1  ]]; then write_array=0 ; break    ; fi
    
        if [[ "${write_array}" -eq 1 ]]; then  shy_lev+=( ${read_levels} ) ; fi
    
    done < "$( find  ${input_dir} -type f -name  ${info_file} )"
    
    if [[ "${#shy_lev[@]}" -lt 2 ]]; then echo "ERROR: SHYFEM depth levels not found. Let's check \"${info_file}.\""; fi 
    
    #========================== Calculation of real physical depth value ==========================
    
    declare -a shy_real_lev
    
    for (( k=0; k<=$(( ${#shy_lev[@]} - 2 )); k++ ))
    do
        depth_value=$( echo "scale=2 ; ( ${shy_lev[$k]} + ${shy_lev[$(( k + 1 ))]} ) / 2 " | bc )   # approximate to 2 decimal values
        shy_real_lev+=( $( printf "%%g" $depth_value ) )                                            # "%g" is used to remove unecessary decimal 0. For example convert 0.50 into 0.5
    done
    
    # This is the tmp file containing the real SHYFEM depth levels. It is necessary for a lot of plots. 
    printf "%%s\n" "${shy_real_lev[@]}" > "${tmp_root_dir}/${depths_tmp}"
    
else
    echo "\"${depths_tmp}\" depths file already exists."
fi

# ===================================================================================================

case "%PLOT_TYPE%" in
    "TS_diagram_NCL")
        module_to_load="${ncl_module}"
        initialization_file="${TS_ini}"
        plot_script="${ts_diagram_script_ncl}"
        frst_day="$frst_day_TS_diagram_NCL"
        last_day="$last_day_TS_diagram_NCL"
    ;;
    "TS_multi_diagram_NCL")
        module_to_load="${ncl_module}"
        initialization_file="${TS_multi_ini}"
        plot_script="${ts_multi_diagram_script_ncl}"
        frst_day="$frst_day_TS_multi_diagram_NCL"
        last_day="$last_day_TS_multi_diagram_NCL"
    ;;
    "profiles_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${profiles_ini}"
        plot_script="${profiles_script_python}"
        frst_day="$frst_day_profiles_PYTHON"
        last_day="$last_day_profiles_PYTHON"
    ;;
    "time_series_temp_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_temp_ini}"
        plot_script="${time_series_temp_python}"
        frst_day="$frst_day_time_series_temp_PYTHON"
        last_day="$last_day_time_series_temp_PYTHON"
    ;;
    "time_series_sal_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_sal_ini}"
        plot_script="${time_series_sal_python}"
        frst_day="$frst_day_time_series_sal_PYTHON"
        last_day="$last_day_time_series_sal_PYTHON"
    ;;
    "time_series_temp_multy_day_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_temp_multy_day_ini}"
        plot_script="${time_series_temp_multy_day_python}"
        frst_day="0" # these plots will cover a day range according to the 'initialization_file' 
        last_day="0" # so they need one cycle only
    ;;
    "time_series_sal_multy_day_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_sal_multy_day_ini}"
        plot_script="${time_series_sal_multy_day_python}"
        frst_day="0"
        last_day="0"
    ;;
    "time_series_lines_temp_sal_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_lines_temp_sal_ini}"
        plot_script="${time_series_lines_temp_sal_python}"
        frst_day="$frst_day_time_series_lines_temp_sal_PYTHON"
        last_day="$last_day_time_series_lines_temp_sal_PYTHON"
    ;;
    "time_series_lines_temp_sal_multy_day_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_lines_temp_sal_multy_day_ini}"
        plot_script="${time_series_lines_temp_sal_multy_day_python}"
        frst_day="0"
        last_day="0"
    ;;
    "time_series_lines_height_multy_day_PYTHON")
        module_to_load="${python_module}"
        initialization_file="${time_series_lines_height_multy_day_ini}"
        plot_script="${time_series_lines_height_multy_day_python}"
        frst_day="0"
        last_day="0"
    ;;
    *)
        echo "The plot type: \"%PLOT_TYPE%\" is not supported. Let's check it out."
        echo "The task will end right now."
        ecflow_client --complete        
    ;;
esac

if [[ $frst_day -gt $last_day ]]; then echo "ERROR: The \$frst_day = ${frst_day} must be less or equal than \$last_day = ${last_day} (starting from 0)."; ERROR; fi

#====================================================================================================

for day_f in $( seq  $frst_day  $last_day );
do

    # ********  Forecast Dates  ********

    # Forecast Date: according to "frst_day" and "last_day"
    DATEF=$( date -u -d "$DATEB  +${day_f} day"  +%%Y%%m%%d )

    echo -e "The current  UTC-date is ${DATE}"
    echo -e "The bulletin UTC-date is ${DATEB}"
    echo -e "The forecast UTC-date is ${DATEF}"

    # *** Variables ***
    YYYYF="${DATEF:0:4}"
    MMF="${DATEF:4:2}"
    DDF="${DATEF:6:2}"

    graph_job="$( mktemp -u ${graph_job_launch_tpl} )"

    #================== Check ===================

    if  [[  ! -d "${output_dir}" ]]; then
        echo  -e "\"output_dir\": ${output_dir} doesn't exists. It will be created right now."
        mkdir -p "${output_dir}" || { echo "It's not possible to create the \"${output_dir}\" output directory."; ERROR; }
    else
        echo  -e "\"output_dir\": ${output_dir} already exists."
    fi

    #============================================================
    #                      START plot BLOCK 
    #============================================================

    echo "%PLOT_TYPE% diagrams will be created right now."

    sed     -e "s,%%%%tmp_root_dir%%%%,${tmp_root_dir},g"                            \
            -e "s,%%%%data_dir%%%%,${data_dir},g"                                    \
            -e "s,%%%%conf_script_dir%%%%,${conf_script_dir},g"                      \
            -e "s,%%%%output_dir%%%%,${output_dir},g"                                \
            -e "s,%%%%script_root_dir%%%%,${script_root_dir},g"                      \
            -e "s/%%%%input_temp3d_file_tpl%%%%/${input_temp3d_file_tpl}/g"          \
            -e "s/%%%%input_salt3d_file_tpl%%%%/${input_salt3d_file_tpl}/g"          \
            -e "s/%%%%input_zeta2d_file_tpl%%%%/${input_zeta2d_file_tpl}/g"          \
            -e "s/%%%%plot_script%%%%/${plot_script}/g"                              \
            -e "s/%%%%encoding_file_name_script%%%%/${encoding_file_name_script}/g"  \
            -e "s/%%%%nodes_info_file%%%%/${nodes_info_file}/g"                      \
            -e "s/%%%%depths_tmp%%%%/${depths_tmp}/g"                                \
            -e "s/%%%%graph_file_name_out_tpl%%%%/${graph_file_name_out_tpl}/g"      \
            -e "s/%%%%d1_L_table%%%%/${d1_L_table}/g"                                \
            -e "s/%%%%d2_L_table_tpl%%%%/${d2_L_table_tpl}/g"                        \
            -e "s/%%%%d345_L_table_tpl%%%%/${d345_L_table_tpl}/g"                    \
            -e "s/%%%%d12345_V_table%%%%/${d12345_V_table}/g"                        \
            -e "s/%%%%d1_E_table%%%%/${d1_E_table}/g"                                \
            -e "s,%%%%module_to_load%%%%,${module_to_load},g"                        \
            -e "s/%%%%queue%%%%/${queue}/g"                                          \
            -e "s/%%%%wall_time%%%%/${wall_time}/g"                                  \
            -e "s/%%%%YYYYF%%%%/${YYYYF}/g"                                          \
            -e "s/%%%%MMF%%%%/${MMF}/g"                                              \
            -e "s/%%%%DDF%%%%/${DDF}/g"                                              \
            -e "s/%%%%DATEB%%%%/${DATEB}/g"                                          \
            -e "s/%%%%day_f%%%%/${day_f}/g"                                          \
            -e "s/%%%%PLOT_TYPE%%%%/%PLOT_TYPE%/g"                                   \
            -e "s/%%%%t_steps_multi_TS%%%%/${t_steps_multi_TS}/g"                    \
            -e "s/%%%%code_field_length%%%%/${code_field_length}/g"                  \
            -e "s/%%%%initialization_file%%%%/${initialization_file}/g"   "${script_root_dir}/${graph_job_template}" > "${tmp_root_dir}/${graph_job}"

    ecflow_qsub "${tmp_root_dir}/${graph_job}" || { echo "WARNING: The job-script: \"${graph_job}\" can't be launched."; continue; }
      
    echo -e "The \"%PLOT_TYPE%\" for $DATEF are just finished. The plots has been realised according to \"${conf_script_dir}/${initialization_file}\"."
    echo -e "You can find the results in \"${output_dir}\".\n"

    rm "${tmp_root_dir}/${graph_job}" || echo "WARNING: It's not possible to remove the job script: \"${graph_job}\"."

    # thes kind of multy-day plots, doesn't neet to be launched for every single forecast day. 
    # This is a redundant check cause for these plots the number of cycles is 1 ( frst_day is equal to last_day )
    if [[ "%PLOT_TYPE%" == "time_series_temp_multy_day_PYTHON"           || "%PLOT_TYPE%" == "time_series_sal_multy_day_PYTHON" || \
          "%PLOT_TYPE%" == "time_series_lines_temp_sal_multy_day_PYTHON" || "%PLOT_TYPE%" == "time_series_lines_height_multy_day_PYTHON" ]]; then ecflow_client --complete; fi

#================================================

done  # end of forecast dates cycle    
   
echo -e "\n\tThe task is now finished\n"

EXIT_STATUS=$?
echo -e "\n\tExecution completed with EXIT_STATUS=${EXIT_STATUS}\n\n"

%include <tail_4_bash.h>               # Include tail common to all tasks. 
                                       # It manages general calls to ecflow client
